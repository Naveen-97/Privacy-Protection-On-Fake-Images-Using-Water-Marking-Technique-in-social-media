package compress;

import java.awt.Color;
import java.awt.image.BufferedImage;

public class ImageConverter {

	private int[] alpha = null;

	/**
	 * Generates an byte-array from a BufferedImage, that can be used for
	 * {@link BitManipulator#manipulateBytes(int[], String)} and
	 * {@link BitManipulator#getInformation(int[], boolean)}. At the same time,
	 * it overwrites the last alpha-channel with the current.
	 * 
	 * @param image the BufferedImage
	 * @return a byte-array for the ManipulateBit class
	 * @see ImageConverter#getLastReadAlphaChannel()
	 * @see ImageConverter#getImage(int[])
	 */
	public int[] getBytes(BufferedImage image) {

		int rgb = 0;
		int[] bytes = new int[image.getWidth() * image.getHeight() * 3 + 2];
		this.alpha = new int[image.getWidth() * image.getHeight()];
		for (int i = 0, k = 0, l = 0; i < image.getWidth(); i++) {
			for (int j = 0; j < image.getHeight(); j++, k += 3, l++) {
				rgb = image.getRGB(i, j);
				bytes[k] = (rgb >> 16) & 0xFF;
				bytes[k + 1] = (rgb >> 8) & 0xFF;
				bytes[k + 2] = (rgb >> 0) & 0xFF;
				alpha[l] = (rgb >> 24) & 0xff;
			}
		}
		bytes[bytes.length - 2] = image.getWidth();
		bytes[bytes.length - 1] = image.getHeight();
		return bytes;
	}

	/**
	 * Generates a BufferedImage from a byte-array (generated by
	 * {@link ImageConverter#getBytes(BufferedImage)} and maybe manipulated by
	 * {@link BitManipulator#manipulateBytes(int[], String)} and the current
	 * alpha-channel.
	 * 
	 * @param bytes the byte-array
	 * @return a BufferedImage generated by the byte-array
	 * @see ImageConverter#setAlphaChannel(int[])
	 * @see ImageConverter#getBytes(BufferedImage)
	 */
	public BufferedImage getImage(int[] bytes) {

		BufferedImage lastImage = new BufferedImage(bytes[bytes.length - 2],
				bytes[bytes.length - 1], BufferedImage.TYPE_INT_ARGB);
		for (int i = 0, k = 0, l = 0; i < lastImage.getWidth(); i++) {
			for (int j = 0; j < lastImage.getHeight(); j++, k += 3, l++) {
				lastImage.setRGB(i, j, new Color(bytes[k], bytes[k + 1],
						bytes[k + 2], alpha[l]).getRGB());
			}
		}
		return lastImage;
	}

	/**
	 * Returns the current alpha channel
	 * 
	 * @return the current alpha channel
	 * @see ImageConverter#getBytes(BufferedImage)
	 */
	public int[] getLastReadAlphaChannel() {
		return alpha;
	}

	/**
	 * Sets the alpha channel
	 * 
	 * @param alpha the new alpha channel
	 * @see ImageConverter#getImage(int[])
	 */
	public void setAlphaChannel(int[] alpha) {
		this.alpha = alpha;
	}
}