package compress;





public class BitManipulator {

	/**
	 * Manipulates a byte-array (generated by
	 * {@link ImageConverter#getBytes(java.awt.image.BufferedImage)} with the
	 * given informations. Signs start and end with backslashes. If there are
	 * backslashes in the message too, they will be replaced with double
	 * backslashes.
	 * 
	 * @param bytes the byte-array
	 * @param information the message
	 * @return the manipulated byte-array
	 * @throws NotEnoughSpaceException thrown if the message is to long for the picture
	 * @see BitManipulator#getInformation(int[], boolean)
	 */
	public static int[] manipulateBytes(int[] bytes, String information)
			throws NotEnoughSpaceException {

		information = "\\" + information.replaceAll("\\\\", "\\\\\\\\") + " \\";
		if ((bytes.length - 2) / 8 < information.length()) {
			throw new NotEnoughSpaceException("Information to long for Picture");
		}
		for (int i = 0, k = 0; i < information.length(); i++) {
			int cur = information.charAt(i);
			for (byte j = 0; j < 8; j++, k++) {
				bytes[k] = setLastBit(bytes[k],
						((cur & 1 << 7 - j) >> 7 - j) == 1);
			}
		}
		return bytes;
	}

	/**
	 * Extracts the hidden message from a byte-array generated by
	 * {@link ImageConverter#getBytes(java.awt.image.BufferedImage)}, hidden by
	 * this library. Hidden messages start and end with an individual backslash.
	 * If there is no leading backslash, there was no message hidden in the
	 * byte-array from this library. If you want to extract all maybe hidden
	 * informations (every last bit in a 8-bit byte) from the byte-array, you
	 * can set the parameter "all" true. Then you have to extract the
	 * informations by yourself from the returned String (if there are some).
	 * 
	 * @param bytes the byte array
	 * @param all normally all should be false, but if you want to extract all informations, all should be true.
	 * @return the informations hidden in bytes or null if no informations could be located
	 * @see BitManipulator#manipulateBytes(int[], String)
	 */
	public static String getInformation(int[] bytes, boolean all) {

		StringBuilder information = new StringBuilder();
		int cur = 0;
		for (int i = 0; i < bytes.length;) {
			cur = 0;
			for (int j = 0; j < 8 && i < bytes.length; j++, i++) {
				cur |= (bytes[i] & 1) << 7 - j;
			}
			information.append((char) cur);
			if (!all && information.length() > 2
					&& information.charAt(information.length() - 2) == '\\'
					&& information.charAt(information.length() - 1) != '\\'
					&& information.charAt(information.length() - 3) != '\\') {
				return information.substring(1, information.length() - 3)
						.replaceAll("\\\\\\\\", "\\\\");
			} else if (!all && information.charAt(0) != '\\') {
				return null;
			}
		}
		return information.length() > 2 ? information.substring(1,
				information.length() - 3).replaceAll("\\\\\\\\", "\\\\")
				: information.toString().replaceAll("\\\\\\\\", "\\\\");
	}

	/**
	 * Sets the last bit of an integer to 1 (flag == true) or 0 (flag == false)
	 * 
	 * @param zahl the int
	 * @param flag true if the last bit shuold be 1, false if the last bist should be 0
	 * @return the manipulated integer
	 */
	private static int setLastBit(int zahl, boolean flag) {

		zahl >>= 1;
		zahl <<= 1;
		if (flag) {
			zahl |= 1;
		}
		return zahl;
	}
}